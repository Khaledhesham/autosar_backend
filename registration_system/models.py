from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token
from django.conf import settings
from files.models import File, Project, Directory
from arxml.models import Package, Composition, SoftwareComponent, TimingEvent, Runnable, Port, SenderReceiverInterface, Interface, DataElement, DataAccess, DataElementRef, DataType, Connector

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_auth_token(sender, instance=None, created=False, **kwargs):
    if created:
        Token.objects.create(user=instance)

# Create your models here.

def MakeProject(project_name, req_user):
    project = Project(name=project_name, user=req_user)
    project.save()
    directory_name = project_name + str("-") + str(project.id)
    main_directory = Directory(name=directory_name, project=project)
    main_directory.save()
    arxml_file = File(name="Composition", file_type="arxml", directory=main_directory)
    arxml_file.save()
    interfaces_file = File(name="DataTypesAndInterfaces", file_type="arxml", directory=main_directory)
    interfaces_file.save()
    package = Package(project=project, interfaces_file=interfaces_file)
    package.save()
    package.Rewrite()
    composition = Composition(file=arxml_file, project=project)
    composition.save()
    composition.Rewrite()
    return project

def CreateDefaultsForUser(user):
    ### Blink
    project = MakeProject("Blinker", user)
    swc = SoftwareComponent.Make(project, "Blinker", 33.4, 40.57)
    runnable = Runnable(name="BlinkerRunnable", concurrent=True, swc=swc)
    runnable.save()
    event = TimingEvent(name="TimingEvent", runnable=runnable, period=1, swc=swc)
    event.save()
    interface = Interface(name="Blink", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    interface.save()
    blinker_interface = SenderReceiverInterface(interface=interface)
    blinker_interface.save()
    led_port = Port(name="Led", swc=swc, type="P-PORT-PROTOTYPE", interface=interface, x=18.5, y=2.4)
    led_port.save()
    type = DataType(package=project.package, type="Boolean")
    type.save()
    blink_element = DataElement(name="BlinkElement", interface=blinker_interface, type=type)
    blink_element.save()
    ref = DataElementRef(port=led_port, data_element=blink_element)
    ref.save()
    acc = DataAccess(name="BlinkerAccess", runnable=runnable, data_element_ref=ref, type="DATA-WRITE-ACCESS")
    acc.save()
    project.package.Rewrite()
    project.composition.Rewrite()
    swc.runnables_file.Write(open("files/default-projects/Blinker/Blinker/Blinker_runnables.c").read())

    ### Double Blink
    project = MakeProject("DoubleBlinker", user)
    swc = SoftwareComponent.Make(project, "DoubleBlinker", 51.56, 40.2)
    top = Runnable(name="TopRunnable", concurrent=True, swc=swc)
    top.save()
    bottom = Runnable(name="BottomRunnable", concurrent=True, swc=swc)
    bottom.save()
    top_event = TimingEvent(name="TopEvent", runnable=top, period=1, swc=swc)
    top_event.save()
    bottom_event = TimingEvent(name="BottomEvent", runnable=bottom, period=1, swc=swc)
    bottom_event.save()
    input_interface = Interface(name="Input", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    input_interface.save()
    input_sr_interface = SenderReceiverInterface(interface=input_interface)
    input_sr_interface.save()
    bottom_interface = Interface(name="Bottom", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    bottom_interface.save()
    bottom_sr_interface = SenderReceiverInterface(interface=bottom_interface)
    bottom_sr_interface.save()
    top_interface = Interface(name="Top", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    top_interface.save()
    top_sr_interface = SenderReceiverInterface(interface=top_interface)
    top_sr_interface.save()
    switch_port = Port(name="Switch", swc=swc, type="R-PORT-PROTOTYPE", interface=input_sr_interface, x=-1.5, y=2.08)
    switch_port.save()
    top_led_port = Port(name="TopLed", swc=swc, type="P-PORT-PROTOTYPE", interface=top_sr_interface, x=18.5, y=2.4)
    top_led_port.save()
    bottom_led_port = Port(name="BottomLed", swc=swc, type="P-PORT-PROTOTYPE", interface=bottom_sr_interface, x=18.5, y=7.8)
    bottom_led_port.save()
    type = DataType(package=project.package, type="Boolean")
    type.save()
    toggle = DataElement(name="Toggle", interface=input_sr_interface, type=type)
    toggle.save()
    top_de = DataElement(name="TopLed", interface=top_sr_interface, type=type)
    top_de.save()
    bottom_de = DataElement(name="BottomLed", interface=bottom_sr_interface, type=type)
    bottom_de.save()
    ref1 = DataElementRef(port=switch_port, data_element=toggle)
    ref1.save()
    ref2 = DataElementRef(port=top_led_port, data_element=top_de)
    ref2.save()
    ref3 = DataElementRef(port=bottom_led_port, data_element=bottom_de)
    ref3.save()
    acc1 = DataAccess(name="TopInputAccess", runnable=top, data_element_ref=ref1, type="DATA-READ-ACCESS")
    acc1.save()
    acc2 = DataAccess(name="BottomInputAccess2", runnable=bottom, data_element_ref=ref1, type="DATA-READ-ACCESS")
    acc2.save()
    acc3 = DataAccess(name="TopOutputAccess", runnable=top, data_element_ref=ref2, type="DATA-WRITE-ACCESS")
    acc3.save()
    acc4 = DataAccess(name="BottomOutputAccess", runnable=bottom, data_element_ref=ref3, type="DATA-WRITE-ACCESS")
    acc4.save()
    project.package.Rewrite()
    project.composition.Rewrite()
    swc.runnables_file.Write(open("files/default-projects/DoubleBlinker/DoubleBlinker/DoubleBlinker_runnables.c").read())

    ### Seat Heater
    project = MakeProject("SeatHeater", user)

    seat_heating_controller_swc = SoftwareComponent.Make(project, "SeatHeatingController", 45.613, 31.477)
    seat_sensor_left_swc = SoftwareComponent.Make(project, "SeatSensorLeft", 16.06, 48.32)
    seat_sensor_Right_swc = SoftwareComponent.Make(project, "SeatSensorRight", 76.06, 47.75)
    heat_regulator_swc = SoftwareComponent.Make(project, "HeatRegulator", 15.838, 22.42)
    seat_heater_swc = SoftwareComponent.Make(project, "SeatHeater", 75.95, 22.89)

    update_heating_runnable = Runnable(name="UpdateHeating", concurrent=True, swc=seat_heating_controller_swc)
    update_heating_runnable.save()
    seat_sensor_runnable_left = Runnable(name="SeatSensorRunnableLeft", concurrent=True, swc=seat_sensor_left_swc)
    seat_sensor_runnable_left.save()
    seat_sensor_runnable_right = Runnable(name="SeatSensorRunnableRight", concurrent=True, swc=seat_sensor_Right_swc)
    seat_sensor_runnable_right.save()
    heat_regulator_runnable = Runnable(name="HeatRegulatorRunnable", concurrent=True, swc=heat_regulator_swc)
    heat_regulator_runnable.save()
    seat_heater_runnable = Runnable(name="SeatHeaterRunnable", concurrent=True, swc=seat_heater_swc)
    seat_heater_runnable.save()

    heating_update_event = TimingEvent(name="HeatingUpdateEvent", runnable=update_heating_runnable, period=1, swc=seat_heating_controller_swc)
    heating_update_event.save()
    seat_sensor_left_update_timer = TimingEvent(name="SeatSensorLeftUpdateTimer", runnable=seat_sensor_runnable_left, period=1, swc=seat_sensor_left_swc)
    seat_sensor_left_update_timer.save()
    seat_sensor_right_update_timer = TimingEvent(name="SeatSensorRightUpdateTimer", runnable=seat_sensor_runnable_right, period=1, swc=seat_sensor_right_swc)
    seat_sensor_right_update_timer.save()
    heat_regulator_event = TimingEvent(name="HeatRegulatorEvent", runnable=heat_regulator_runnable, period=1, swc=heat_regulator_swc)
    heat_regulator_event.save()
    seat_heater_event = TimingEvent(name="SeatHeaterEvent", runnable=seat_heater_runnable, period=1, swc=seat_heater_swc)
    seat_heater_event.save()

    regulator_position_interface = Interface(name="RegulatorPosition", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    regulator_position_interface.save()
    regulator_position_sr_interface = SenderReceiverInterface(interface=regulator_position_interface)
    regulator_position_sr_interface.save()

    heater_level_interface = Interface(name="HeaterLevel", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    heater_level_interface.save()
    heater_level_sr_interface = SenderReceiverInterface(interface=heater_level_interface)
    heater_level_sr_interface.save()
    
    left_seat_status_interface = Interface(name="LeftSeatStatusInterface", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    left_seat_status_interface.save()
    left_seat_status_sr_interface = SenderReceiverInterface(interface=left_seat_status_interface)
    left_seat_status_sr_interface.save()
    
    right_seat_status_interface = Interface(name="RightSeatStatusInterface", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    right_seat_status_interface.save()
    right_seat_status_sr_interface = SenderReceiverInterface(interface=right_seat_status_interface)
    right_seat_status_sr_interface.save()
    
    left_sensor_io_interface = Interface(name="LeftSensorIOInterface", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    left_sensor_io_interface.save()
    left_sensor_io_sr_interface = SenderReceiverInterface(interface=left_sensor_io_interface)
    left_sensor_io_sr_interface.save()
    
    right_sensor_io_interface = Interface(name="RightSensorIOInterface", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    right_sensor_io_interface.save()
    right_sensor_io_sr_interface = SenderReceiverInterface(interface=right_sensor_io_interface)
    right_sensor_io_sr_interface.save()
        
    regulator_io_interface = Interface(name="RegulatorIOInterface", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    regulator_io_interface.save()
    regulator_io_sr_interface = SenderReceiverInterface(interface=regulator_io_interface)
    regulator_io_sr_interface.save()
 
    left_seat_heater_io_interface = Interface(name="LeftSeatHeaterIOInterface", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    left_seat_heater_io_interface.save()
    left_seat_heater_io_sr_interface = SenderReceiverInterface(interface=left_seat_heater_io_interface)
    left_seat_heater_io_sr_interface.save()

    right_seat_heater_io_interface = Interface(name="RightSeatHeaterIOInterface", package=project.package, type="SENDER-RECEIVER-INTERFACE")
    right_seat_heater_io_interface.save()
    right_seat_heater_io_sr_interface = SenderReceiverInterface(interface=right_seat_heater_io_interface)
    right_seat_heater_io_sr_interface.save()

    regulator_position_port = Port(name="RegulatorPosition", swc=seat_heating_controller_swc, type="R-PORT-PROTOTYPE", interface=regulator_position_interface, x=-1.5, y=1.29)
    regulator_position_port.save()
    heater_levels_port = Port(name="HeaterLevels", swc=seat_heating_controller_swc, type="P-PORT-PROTOTYPE", interface=heater_level_interface, x=18.5, y=1.99)
    heater_levels_port.save()
    left_seat_status_port = Port(name="LeftSeatStatus", swc=seat_heating_controller_swc, type="R-PORT-PROTOTYPE", interface=left_seat_status_interface, x=-1.5, y=6.67)
    left_seat_status_port.save()
    right_seat_status_port = Port(name="RightSeatStatus", swc=seat_heating_controller_swc, type="R-PORT-PROTOTYPE", interface=right_seat_status_interface, x=18.5, y=7.87)
    right_seat_status_port.save()
    status_left_port = Port(name="StatusLeft", swc=seat_sensor_left_swc, type="P-PORT-PROTOTYPE", interface=left_seat_status_interface, x=18.5, y=1.73)
    status_left_port.save()
    status_right_port = Port(name="StatusRight", swc=seat_sensor_Right_swc, type="P-PORT-PROTOTYPE", interface=right_seat_status_interface, x=-1.5, y=3.69)
    status_right_port.save()
    sensor_left_io_port = Port(name="SensorLeftIO", swc=seat_sensor_left_swc, type="R-PORT-PROTOTYPE", interface=left_sensor_io_interface, x=-1.5, y=3.58)
    sensor_left_io_port.save()
    sensor_right_io_port = Port(name="SensorRightIO", swc=seat_sensor_right_swc, type="R-PORT-PROTOTYPE", interface=right_sensor_io_interface, x=18.5, y=2.42)
    sensor_right_io_port.save()
    position_port = Port(name="Position", swc=heat_regulator_swc, type="P-PORT-PROTOTYPE", interface=regulator_position_interface, x=18.5, y=2.89)
    position_port.save()
    regulator_io_port = Port(name="RegulatorIO", swc=heat_regulator_swc, type="R-PORT-PROTOTYPE", interface=regulator_io_interface, x=-1.5, y=3.12)
    regulator_io_port.save()
    levels_port = Port(name="Levels", swc=seat_heater_swc, type="R-PORT-PROTOTYPE", interface=heater_level_interface, x=-1.5, y=2.66)
    levels_port.save()
    left_seater_io_port = Port(name="LeftSeaterIO", swc=seat_heater_swc, type="P-PORT-PROTOTYPE", interface=left_seat_heater_io_interface, x=18.5, y=2.427)
    left_seater_io_port.save()
    right_seater_io_port = Port(name="RightSeaterIO", swc=seat_heater_swc, type="P-PORT-PROTOTYPE", interface=right_seat_heater_io_interface, x=18.5, y=7.16)
    right_seater_io_port.save()

    boolean_type = DataType(package=project.package, type="Boolean")
    boolean_type.save()
    uint32_type = DataType(package=project.package, type="UInt32")
    uint32_type.save()

    position_de = DataElement(name="Position", interface=regulator_position_sr_interface, type=uint32_type)
    position_de.save()
    left_heat_level_de = DataElement(name="LeftHeatLevel", interface=left_seat_heater_io_sr_interface, type=uint32_type)
    left_heat_level_de.save()
    right_heat_level_de = DataElement(name="RightHeatLevel", interface=right_seat_heater_io_sr_interface, type=uint32_type)
    right_heat_level_de.save()
    passenger_on_left_seat_de = DataElement(name="PassengerOnLeftSeat", interface=left_seat_status_sr_interface, type=boolean_type)
    passenger_on_left_seat_de.save()
    passenger_on_right_seat_de = DataElement(name="PassengerOnRightSeat", interface=right_seat_status_sr_interface, type=boolean_type)
    passenger_on_right_seat_de.save()
    left_sensor_value_de = DataElement(name="LeftSensorValue", interface=left_sensor_io_sr_interface, type=boolean_type)
    left_sensor_value_de.save()
    right_sensor_value_de = DataElement(name="RightSensorValue", interface=right_sensor_io_sr_interface, type=boolean_type)
    right_sensor_value_de.save()
    regulator_value_de = DataElement(name="RegulatorValue", interface=regulator_io_sr_interface, type=uint32_type)
    regulator_value_de.save()
    left_heater_value_de = DataElement(name="LeftHeaterValue", interface=left_seat_heater_io_sr_interface, type=uint32_type)
    left_heater_value_de.save()
    right_heater_value_de = DataElement(name="RightHeaterValue", interface=right_seat_heater_io_sr_interface, type=uint32_type)
    right_heater_value_de.save()

    regulator_position_to_position_ref = DataElementRef(port=regulator_position_port, data_element=position_de)
    regulator_position_to_position_ref.save()
    heater_levels_to_right_heat_level_ref = DataElementRef(port=heater_levels_port, data_element=right_heat_level_de)
    heater_levels_to_right_heat_level_ref.save()
    heater_levels_to_left_heat_level_ref = DataElementRef(port=heater_levels_port, data_element=left_heat_level_de)
    heater_levels_to_left_heat_level_ref.save()
    right_seat_status_to_passenger_on_right_seat_ref = DataElementRef(port=right_seat_status_port, data_element=passenger_on_right_seat_de)
    right_seat_status_to_passenger_on_right_seat_ref.save()
    left_seat_status_to_passenger_on_left_seat_ref = DataElementRef(port=left_seat_status_port, data_element=passenger_on_left_seat_de)
    left_seat_status_to_passenger_on_left_seat_ref.save()
    position_to_position_ref = DataElementRef(port=position_port, data_element=position_de)
    position_to_position_ref.save()
    status_left_to_passenger_on_left_seat_ref = DataElementRef(port=status_left_port, data_element=passenger_on_left_seat_de)
    status_left_to_passenger_on_left_seat_ref.save()
    status_right_to_passenger_on_left_seat_ref = DataElementRef(port=status_right_port, data_element=passenger_on_right_seat_de)
    status_right_to_passenger_on_left_seat_ref.save()
    levels_to_left_heat_level_ref = DataElementRef(port=levels_port, data_element=left_heat_level_de)
    levels_to_left_heat_level_ref.save()
    levels_to_right_heat_level_ref = DataElementRef(port=levels_port, data_element=right_heat_level_de)
    levels_to_right_heat_level_ref.save()
    sensor_left_io_to_left_sensor_value_ref = DataElementRef(port=sensor_left_io_port, data_element=left_sensor_value_de)
    sensor_left_io_to_left_sensor_value_ref.save()
    sensor_right_io_to_right_sensor_value_ref = DataElementRef(port=sensor_right_io_port, data_element=right_sensor_value_de)
    sensor_right_io_to_right_sensor_value_ref.save()
    regulator_io_to_regulator_value_ref = DataElementRef(port=regulator_io_port, data_element=regulator_value_de)
    regulator_io_to_regulator_value_ref.save()
    left_seater_io_to_left_heater_value_ref = DataElementRef(port=left_seater_io_port, data_element=left_heater_value_de)
    left_seater_io_to_left_heater_value_ref.save()
    right_seater_io_to_left_heater_value_ref = DataElementRef(port=right_seater_io_port, data_element=right_heater_value_de)
    right_seater_io_to_left_heater_value_ref.save()

    regulator_position_access = DataAccess(name="RegulatorPositionAccess", runnable=update_heating_runnable, data_element_ref=regulator_position_to_position_ref, type="DATA-READ-ACCESS")
    regulator_position_access.save()
    heater_right_level_access = DataAccess(name="HeaterRightLevelAccess", runnable=update_heating_runnable, data_element_ref=heater_levels_to_right_heat_level_ref, type="DATA-WRITE-ACCESS")
    heater_right_level_access.save()
    heater_left_level_access = DataAccess(name="HeaterLeftLevelAccess", runnable=update_heating_runnable, data_element_ref=heater_levels_to_left_heat_level_ref, type="DATA-WRITE-ACCESS")
    heater_left_level_access.save()
    right_seat_status_access = DataAccess(name="RightSeatStatusAccess", runnable=update_heating_runnable, data_element_ref=right_seat_status_to_passenger_on_right_seat_ref, type="DATA-READ-ACCESS")
    right_seat_status_access.save()
    left_seat_status_access = DataAccess(name="LeftSeatStatusAccess", runnable=update_heating_runnable, data_element_ref=left_seat_status_to_passenger_on_left_seat_ref, type="DATA-READ-ACCESS")
    left_seat_status_access.save()
    seat_sensor_left_status_access = DataAccess(name="SeatSensorLeftStatusAccess", runnable=seat_sensor_runnable_left, data_element_ref=status_left_to_passenger_on_left_seat_ref, type="DATA-WRITE-ACCESS")
    seat_sensor_left_status_access.save()
    seat_sensor_right_status_access = DataAccess(name="SeatSensorRightStatusAccess", runnable=seat_sensor_runnable_right, data_element_ref=status_right_to_passenger_on_right_seat_ref, type="DATA-WRITE-ACCESS")
    seat_sensor_right_status_access.save()
    heat_regulator_position_access = DataAccess(name="HeatRegulatorPositionAccess", runnable=heat_regulator_runnable, data_element_ref=regulator_position_to_position_ref, type="DATA-WRITE-ACCESS")
    heat_regulator_position_access.save()
    seat_heater_left_level_access = DataAccess(name="SeatHeaterLeftLevelAccess", runnable=seat_heater_runnable, data_element_ref=levels_to_left_heat_level_ref, type="DATA-READ-ACCESS")
    seat_heater_left_level_access.save()
    seat_heater_right_level_access = DataAccess(name="SeatHeaterRightLevelAccess", runnable=seat_heater_runnable, data_element_ref=levels_to_right_heat_level_ref, type="DATA-READ-ACCESS")
    seat_heater_right_level_access.save()
    seat_heater_left_io_access = DataAccess(name="SeatHeaterLeftIOAccess", runnable=seat_heater_runnable, data_element_ref=left_seater_io_to_left_heater_value_ref, type="DATA-WRITE-ACCESS")
    seat_heater_left_io_access.save()
    seat_heater_right_io_access = DataAccess(name="SeatHeaterRightIOAccess", runnable=seat_heater_runnable, data_element_ref=right_seater_io_to_right_heater_value_ref, type="DATA-WRITE-ACCESS")
    seat_heater_right_io_access.save()
    seat_sensor_left_io_access = DataAccess(name="SeatSensorLeftIOAccess", runnable=seat_sensor_runnable_left, data_element_ref=sensor_left_io_to_left_sensor_value_ref, type="DATA-READ-ACCESS")
    seat_sensor_left_io_access.save()
    seat_sensor_right_io_access = DataAccess(name="SeatSensorRightIOAccess", runnable=seat_sensor_runnable_right, data_element_ref=sensor_right_io_to_right_sensor_value_ref, type="DATA-READ-ACCESS")
    seat_sensor_right_io_access.save()

    connector1 = Connector(composition=project.composition, p_port=position_port, r_port=regulator_position_port)
    connector1.save()
    connector2 = Connector(composition=project.composition, p_port=status_left_port, r_port=left_seat_status_port)
    connector2.save()
    connector3 = Connector(composition=project.composition, p_port=status_right_port, r_port=right_seat_status_port)
    connector3.save()
    connector4 = Connector(composition=project.composition, p_port=levels_port, r_port=heater_levels_port)
    connector4.save()

    project.package.Rewrite()
    project.composition.Rewrite()
    seat_heating_controller_swc.runnables_file.Write(open("files/default-projects/SeatHeater/SeatHeatingController/SeatHeatingController_runnables.c").read())
    seat_sensor_left_swc.runnables_file.Write(open("files/default-projects/SeatHeater/SeatSensorLeft/SeatSensorLeft_runnables.c").read())
    seat_sensor_Right_swc.runnables_file.Write(open("files/default-projects/SeatHeater/SeatSensorRight/SeatSensorRight_runnables.c").read())
    heat_regulator_swc.runnables_file.Write(open("files/default-projects/SeatHeater/HeatRegulator/HeatRegulator_runnables.c").read())
    seat_heater_swc.runnables_file.Write(open("files/default-projects/SeatHeater/SeatHeater/SeatHeater_runnables.c").read())
    